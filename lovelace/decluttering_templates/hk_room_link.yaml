hk_room_link:
  default:
    - aspect_ratio: "3/1"
  card:
    type: custom:button-card
    name: "[[name]]"
    icon: "[[icon]]"
    show_state: true
    color_type: 'icon'
    color: >
      [[[ return "rgb(28, 128, 199)"]]]
    aspect_ratio: "[[aspect_ratio]]"
    tap_action:
      action: navigate
      navigation_path: "[[path]]"
    double_tap_action:
      action: call-service
      service: light.turn_off
      service_data:
        entity_id: "[[lights]]"
      haptic: success
    variables:
      contact_sensors: "[[contact_sensors]]"
      lights: "[[lights]]"
    styles:
      grid:
        - grid-template-areas: > 
            [[[
              if (variables.contact_sensors === "[[contact_sensors]]" || variables.contact_sensors.length === 0)
                return `"i n" 
                "i room_temperature"`
              else
                return `"i n" 
                "i room_temperature"
                "i locked"`
            ]]]
        - grid-template-columns: min-content 1fr
        - grid-template-rows: 2fr 1fr
      img_cell:
        - width: 76px
        - color: >
            [[[
              if (variables.lights === "[[lights]]" || variables.lights.length === 0) {
                return "";
              }

              for (let i = 0; i < variables.lights.length; i++) {
                const light = variables.lights[i];
                if (states[light].state === 'on') {
                  return "yellow";
                }
              }
            ]]]
      name:
        - justify-self: start
        - font-weight: bold
      custom_fields:
        room_temperature:
          - justify-self: start
          - font-size: 15px
        locked:
          - justify-self: start
          - font-size: 15px
    custom_fields:
      room_temperature: >
        [[[
          return `<ha-icon
          icon="mdi:thermometer"
          style="width: 15px; height: 15px; margin-bottom: 3px;">
          </ha-icon><span>${states['[[temperature_sensor]]'].state}Â°C</span>`
        ]]]
      locked: >
        [[[
          if (variables.contact_sensors === "[[contact_sensors]]" || variables.contact_sensors.length === 0) {
            return "";
          }

          let retString = "Geschlossen";
          let anyOpen = false;
          for (let i = 0; i < variables.contact_sensors.length; i++) {
            const contact_sensor = variables.contact_sensors[i];
            if (states[contact_sensor].state === 'on') {
              anyOpen = true;
              retString = "Offen";
            } else if (states[contact_sensor].state === 'unavailable') {
              retString = "unavailable!";
              anyOpen = true;
            }
          }

          return `<ha-icon
          icon="${anyOpen ? 'mdi:door-open' : 'mdi:door'}"
          style="width: 15px; height: 15px; margin-bottom: 3px;">
          </ha-icon><span>${retString}</span>`
        ]]]